import heapq

goal = [[1,2,3],[4,5,6],[7,8,0]]
moves = [(-1,0),(1,0),(0,-1),(0,1)]

def manhattan(p): return sum(abs((val-1)//3 - i) + abs((val-1)%3 - j)
                             for i,row in enumerate(p) for j,val in enumerate(row) if val)

def find_zero(p): return next((i,j) for i in range(3) for j in range(3) if p[i][j]==0)

def neighbors(p):
    x,y = find_zero(p)
    for dx,dy in moves:
        nx,ny = x+dx,y+dy
        if 0<=nx<3 and 0<=ny<3:
            np = [r[:] for r in p]
            np[x][y], np[nx][ny] = np[nx][ny], np[x][y]
            yield np

def to_tup(p): return tuple(map(tuple, p))

def solve(start):
    q, seen = [(manhattan(start), 0, start)], {to_tup(start): 0}
    prev = {}
    while q:
        _, g, curr = heapq.heappop(q)
        if curr == goal:
            path = [curr]
            while to_tup(curr) in prev:
                curr = prev[to_tup(curr)]
                path.append(curr)
            return path[::-1]
        for n in neighbors(curr):
            nt = to_tup(n)
            if nt not in seen or seen[nt] > g+1:
                seen[nt] = g+1
                heapq.heappush(q, (g+1+manhattan(n), g+1, n))
                prev[nt] = curr
    return None

def print_path(path):
    for i, p in enumerate(path):
        print(f"Step {i}:")
        for r in p: print(' '.join(str(x) if x else ' ' for x in r))
        print()

# Example input
start = [[1,2,3],[4,0,6],[7,5,8]]
path = solve(start)
if path:
    print(f"Solved in {len(path)-1} steps!\n")
    print_path(path)
else:
    print("No solution.")
